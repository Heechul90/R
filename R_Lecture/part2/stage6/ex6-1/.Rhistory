filter(!is.na(income)) %>%
group_by(ageg, sex) %>%
summarise(mean_income = mean(income))
sex_income
# 바 그래프
ggplot(sex_income, aes(x=ageg, y= mean_income, fill= sex)) +
geom_col() +
scale_x_discrete(limits=c('young', 'middle', 'old'))
# 연령대 및 성별로 나눈 바 그래프
ggplot(sex_income, aes(x=ageg, y= mean_income, fill= sex)) +
geom_col(position = 'dodge') +
scale_x_discrete(limits=c('young', 'middle', 'old'))
## 6. 연령 및 성별 궐급 평균표 만들기
sex_age <- welfare %>%
filter(!is.na(income)) %>%
group_by(age, sex) %>%
summarise(mean_income = mean(income))
sex_age
ggplot(sex_age, aes(x=age, y= mean_income, col= sex)) +
geom_line(size=1)
## 7. 직업별 월급 차이
# 어떤 직업이 월급을 가장 많이 받을까?
# 변수 검토하기
class(welfare$code_job)
table(welfare$code_job)
# 직업분류 코드 목록 불러오기
list_job <- read_excel('ex.data/Koweps_Codebook.xlsx', col_names = T, sheet = 2)
list_job
head(list_job)
dim(list_job)
# welfare에 직업명 결합
welfare <- left_join(welfare, list_job, id= 'code_job')
welfare %>%
filter(!is.na(code_job)) %>%
select(code_job, job) %>%
head(10)
# 직업별 월급 평균표 만들기
job_income <- welfare %>%
filter(!is.na(job) & !is.na(income)) %>%
group_by(job) %>%
summarise(mean_income = mean(income))
head(job_income)
# 상위 10개만 추출
top10 <- job_income %>%
arrange(desc(mean_income)) %>%
head(10)
top10
ggplot(top10, aes(x= reorder(job, mean_income), y=mean_income, fill= job)) +
geom_col() +
coord_flip()
# 하위 10개만 추출
bottom10 <- job_income %>%
arrange(mean_income) %>%
head(10)
bottom10
ggplot(bottom10, aes(x= reorder(job, -mean_income), y=mean_income, fill= job)) +
geom_col() +
coord_flip()
## 7. 성별 직업 빈도
# 1) 성별 직업 빈도표 만들기
# 남성 직업 빈도 상위 10개 추출
job_male <- welfare %>%
filter(!is.na(job) & sex == 'male') %>%
group_by(job) %>%
summarise(n =n()) %>%
arrange(desc(n)) %>%
head(10)
job_male
# 여성 직업 빈도 상위 10개 추출
job_female <- welfare %>%
filter(!is.na(job) & sex == 'female') %>%
group_by(job) %>%
summarise(n =n()) %>%
arrange(desc(n)) %>%
head(10)
job_female
# 그래프 그리기
# 남성 직업 빈도 상위 10개 그래프
ggplot(job_male, aes(x= reorder(job, n), y= n, fill= job)) +
geom_col() +
coord_flip()
# 여성 직업 빈도 상위 10개 그래프
ggplot(job_female, aes(x= reorder(job, n), y= n, fill= job)) +
geom_col() +
coord_flip()
## 8. 종교 유무에 다른 이혼율 (ㅅㅄㅄㅄㅄㅂ)
# 종교가 있는 사람들이 이혼율은 어떨가?
# 1) 변수 검토하기
class(welfare$religion)
table(welfare$religion)
# 전처리
welfare$religion <- ifelse(welfare$religion ==1, 'yes', 'no')
table(welfare$religion)
qplot(welfare$religion)
# 2) 혼인 상태 변수 검토 및 전처리
class(welfare$marriage)
table(welfare$marriage)
welfare$group_marriage <- ifelse(welfare$marriage == 1, 'marriage',
ifelse(welfare$marriage == 3, 'divorce', NA))
table(welfare$group_marriage)
table(is.na(welfare$group_marriage))
qplot(welfare$group_marriage)
# 종교 유무에 따른 이혼율 표 만들기(ㅅㅂ)
religion_marriage <- welfare %>%
filter(!is.na(group_marriage)) %>%
group_by(religion, group_marriage) %>%
summarise(n =n()) %>%
mutate(tot_group = sum(n)) %>%
mutate(pct = round(n/tot_group*100, 1))
religion_marriage
# 이혼율 표 만들기
divorce <- religion_marriage %>%
filter(group_marriage == 'divorce') %>%
select(religion, pct)
divorce
# 그래프 만들기
ggplot(divorce, aes(x=religion, y = pct, fill= religion)) +
geom_col()
# 9. 연령대별 이혼율율
ageg_marriage <- welfare %>%
filter(!is.na(group_marriage)) %>%
group_by(ageg, group_marriage) %>%
summarise(n = n()) %>%
mutate(tot_group = sum(n)) %>%
mutate(pct = round(n/tot_group*100, 1))
ageg_marriage
# 초년 제외, 이혼 추출
ageg_divorce <- ageg_marriage %>%
filter(ageg == 'young' & group_marriage == 'divorce') %>%
select(ageg, pct)
ageg_divorce
# 그래프 만들기
ggplot(ageg_divorce, aes(x= ageg, y= pct, fill= ageg)) +
geom_col()
# 연령대 종교 유무 , 결혼상태별 비율표 만들기
ageg_religion_marriage <- welfare %>%
filter(!is.na(group_marriage) & ageg != 'young') %>%
group_by(ageg, religion, group_marriage) %>%
summarise(n= n()) %>%
mutate(tot_group = sum(n)) %>%
mutate(pct = round(n/tot_group*100, 1))
ageg_religion_marriage
# 연령대 및 종교 유무별 이혼율 표 만들기
df_divorce <- ageg_religion_marriage %>%
filter(group_marriage == 'divorce') %>%
select(ageg, religion, pct)
df_divorce
# 연령대 및 공교 유무에 따른 이혼율 그래프 그리기
ggplot(df_divorce, aes(x= ageg, y= pce, fill= religion)) +
geom_col(position = 'dodge')
## 9. 지역별 연령대 비율
# 노년층이 많은 지역은 어디일까
# 지역 변수 검토 및 전처리하기
# 1) 변수 검토하기
class(welfare$code_region)
table(welfare$code_region)
welfare %>%
select(code_region, region) %>%
head
# 지역별 연령대 비율표 만들기
region_ageg <- welfare %>%
group_by(region, ageg) %>%
summarise(n= n()) %>%
mutate(tot_group= sum(n)) %>%
mutate(pct= round(n/tot_group, 1))
region_ageg
ggplot(region_ageg, aes(x= region, y= pct, fill= ageg)) +
geom_col() +
coord_flip()
# 노년층 비율 내림차순 정렬
list_order_old <- rigion_ageg %>%
filter(ageg == 'old') %>%
arrage(decs(pct))
# 노년층 비율 내림차순 정렬
list_order_old <- region_ageg %>%
filter(ageg == 'old') %>%
arrage(decs(pct))
# 노년층 비율 내림차순 정렬
list_order_old <- region_ageg %>%
filter(ageg == 'old') %>%
arrange(decs(pct))
# 노년층 비율 내림차순 정렬
list_order_old <- region_ageg %>%
filter(ageg == 'old') %>%
arrange(desc(pct))
list_order_old
# 지역명 순서 변수 만들기
order <- list_order_old$region
order
ggplot(region_ageg, aes(x= region, y= pct, fill= ageg)) +
goem_col() +
coord_flip()
ggplot(region_ageg, aes(x= region, y= pct, fill= ageg)) +
geom_col() +
coord_flip()
ggplot(region_ageg, aes(x= region, y= pct, fill= ageg)) +
geom_col() +
coord_flip() +
scale_x_discrete(limits = order)
# 노년층 비율 내림차순 정렬
list_order_old <- region_ageg %>%
filter(ageg == 'old') %>%
arrange(desc(pct))
list_order_old
ggplot(region_ageg, aes(x= region, y= pct, fill= ageg)) +
geom_col() +
coord_flip()
# 지역명 순서 변수 만들기
order <- list_order_old$region
order
ggplot(region_ageg, aes(x= region, y= pct, fill= ageg)) +
geom_col() +
coord_flip() +
scale_x_discrete(limits = order)
# 연령대 순으로 막대 색깔 나열하기
# young, middle, old 순으로 보여주기
class(region_ageg$ageg)
region_ageg$ageg <- Factor(region_ageg$ageg,
level = c('old', 'middle', 'young'))
region_ageg$ageg <- factor(region_ageg$ageg,
level = c('old', 'middle', 'young'))
class(region_ageg$ageg)
level(region_ageg$ageg)
levels(region_ageg$ageg)
# 지역별 노년층 비율 그래프 그리기(old, middle, young 순으로)
ggplot(region_ageg, aes(x= region, y= pct, fill= ageg)) +
geom_col() +
coord_flip() +
scale_x_discrete(limits = order)
# 지역명 순서 변수 만들기
order <- list_order_old$region
order
# 지역별 노년층 비율 그래프 그리기(old, middle, young 순으로)
ggplot(region_ageg, aes(x= region, y= pct, fill= ageg)) +
geom_col() +
coord_flip() +
scale_x_discrete(limits = order)
# 노년층 비율 내림차순 정렬
list_order_old <- region_ageg %>%
filter(ageg == 'old') %>%
arrange(desc(pct))
list_order_old
# 지역명 순서 변수 만들기
order <- list_order_old$region
order
# 지역별 노년층 비율 그래프 그리기
ggplot(region_ageg, aes(x= region, y= pct, fill= ageg)) +
geom_col() +
coord_flip() +
scale_x_discrete(limits = order)
# 노년층 비율 내림차순 정렬
list_order_old <- region_ageg %>%
filter(ageg == 'old') %>%
arrange(pct)
list_order_old
# 지역별 노년층 비율 그래프 그리기
ggplot(region_ageg, aes(x= region, y= pct, fill= ageg)) +
geom_col() +
coord_flip() +
scale_x_discrete(limits = order)
mf1<- function(x) {
if(x>0) {
x <- x*x
} else {
x <- 0
} return(x)
}
mf1<- function(x) {
if(x>0) {
x <- x*x
} else {
x <- 0
return(x)
}
}
mf1(1)
mf1(5)
mf1(5)
mf1<- function(x) {
if(x>0) {
x <- x*x
} else {
x <- 0
return(x) }
}
mf1(2)
mf1(2)
mf1<- function(x) {
if(x>0) {
x <- x*x
return(x)
} else {
x <- 0
return(x) }
}
mf1(2)
mf1(5)
mf(-1)
mf1(-1)
mf2 <- function(x) {
if(x>0) {
x <- x*2
return(x)
} if else(x==0) {
x <- 0
return(x)
} else {
x <- x*(-2)
return()
}
}
mf2 <- function(x) {
if(x>0) {
x <- x*2
return(x)
} if else(x==0) {
x <- 0
return(x)
} else {
x <- x*(-2)
return()
}
}
mf2 <- function(x) {
if(x>0) {
x <- x*2
return(x)
} if else(x==0) {
x <- 0
return(x)
} else {
x <- x*(-2)
return(x)
}
}
if(x>0) {
x <- x*2
return(x)
} else if(x==0) {
x <- 0
return(x)
} else {
x <- x*(-2)
return(x)
}
if(x>0) {
x <- x*2
return(x)
} else if(x==0) {
x <- 0
return(x)
} else {
x <- -x*2
return(x)
}
mf2 <- function(x) {
if(x>0) {
x <- x*2
return(x)
} else if(x==0) {
x <- 0
return(x)
} else {
x <- -x*2
return(x)
}
}
mf2(0)
mf(-1)
mf2(-1)
mf2(-4)
mf2 <- function(x) {
if(x>0) {
x <- x*2
return(x)
} else if(x==0) {
x <- 0
return(x)
} else {
x <- x* (-2)
return(x)
}
}
mf2(-4)
mf2 <- function(x) {
if(x>0) {
x <- x*2
return(x)
} else if(x==0) {
x <- 0
return(x)
} else {
x <- -(x*2)
return(x)
}
}
mf2(-1)
x <- x*2
mf2(-1)
mf2(-4)
mf2 <- function(x) {
if(x>0) {
x <- x*2
return(x)
} else if(x==0) {
x <- 0
return(x)
} else {
x <- x*2
return(x)
}
}
mf2(-1)
mf2(-4)
myf1 <- function(x) {
if(x>5) {
x <- 1
return(x)
} else {
x <- 0
return(x)
}
}
myf1(6)
myf(1)
myf1(1)
myf2 <- function(x) {
if(x>=0) {
x <- 1
return(x)
} else {
x <- 0
return(x)
}
}
myf2(34)
myf2(-21)
myf3 <- function(a,b) {
if(a>b) {
c <- a-b
return(c)
} else if(b>a) {
c <- b-a
return(c)
}
}
myf3(5,3)
myf3(2,9)
myf4 <- function(x) {
if(x<0) {
x <- 0
return(x)
} else if (x>=0 & x<5) {
x <- 1
return(x)
} else {
x <- 10
return(x)
}
}
myf4(-1)
myf4(0)
myf4(5)
myf4(4.9999999)
myf5 <- ifelse(x == 'Y' | 'y', 'Yes', 'Not Yes')
myf5 <- ifelse(x == Y|y, 'Yes', 'Not Yes')
}
myf5 <- function(input) {
if (input == 'Y' | input == 'y') {
return('Yes')
} else {
return('Not Yes')
}
}
myf5(s)
myf5(Y)
function(input) {
if (input == 'Y' | input == 'y') {
return('Yes')
} else {
return('Not Yes')
}
}
t
y
myf5 <- function(input) {
if (input == 'Y' | input == 'y') {
return('Yes')
} else {
return('Not Yes')
}
}
myf5(Y)
myf5('Y')
myf5('df')
myf5 <- function(x) {
if (x == 'Y' | x == 'y') {
return('Yes')
} else {
return('Not Yes')
}
}
myf5('df')
myf5('y')
myf5('y')
for3 <- function(z) {
for(i in 1:z*10) {
print(i)
}
}
for3(5)
for3(9)
