line <- str_c(i, '단')
print(line)
for (k in 1:9) {
line <- str_c(i, ' * ', k, ' = ', i*k)
print(line)
}
}
# 연습문제
#1. 구구단
library(stringr)
for (i in 2:9) {
line <- str_c(i, '단')
print(line)
for (k in 1:9) {
line <- str_c(i, ' * ', k, ' = ', i*k)
print(line)
}
}
for (i in 2:9) {
x <- paste(i, '단')
print(x)
}
for (i in 2:9) {
x <- paste(i, '단')
print(x)
for(k in 1:9) {
x <- print(paste(i, '*', K, '=', i*l))
}
}
for (i in 2:9) {
x <- paste(i, '단')
print(x)
for(k in 1:9) {
x <- paste(i, '*', K, '=', i*l)
print(x)
}
}
for (i in 2:9) {
x <- paste(i, '단')
print(x)
for(k in 1:9) {
x <- paste(i, '*', K, '=', i*k)
print(x)
}
}
for (i in 2:9) {
x <- paste(i, '단')
print(x)
for(k in 1:9) {
x <- paste(i, '*', K, '=', i*k)
print(x)
}
}
for (i in 2:9) {
x <- paste(i, '단')
print(x)
for(k in 1:9) {
x <- paste(i, '*', k, '=', i*K)
print(x)
}
}
for (i in 2:9) {
line <- str_c(i, '단')
print(line)
for (k in 1:9) {
line <- str_c(i, ' * ', k, ' = ', i*k)
print(line)
}
}
for (i in 2:9) {
line <- paste(i, '단')
print(line)
for(k in 1:9) {
line <- paste(i, '*', k, '=', i*K)
print(line)
}
}
for (i in 2:9) {
line <- paste(i, '단')
print(line)
for(k in 1:9) {
line <- paste(i, '*', k, '=', i*k)
print(line)
}
}
for (i in 2:9) {
line <- paste(i, '단')
print(line)
for(k in 1:9) {
line <- paste(i, '*', k, '=', i*k)
print(line)
}
}
for(i in 2:9) {
print(i)
}
for(i in 2:9) {
gugudan <- paste(i, '단')
print(i)
}
for(i in 2:9) {
gugudan <- paste(i, '단')
print(gugudan)
}
for(i in 2:9) {
gugudan <- paste(i, '단')
print(gugudan)
for(k in 1:9) {
ggg <- paste(i, '*', k, '=', i*k)
print(ggg)
}
}
gg <- function(x) {
for(i in 2:9) {
gugudan <- paste(i, '단')
print(gugudan)
for(k in 1:9) {
ggg <- paste(i, '*', k, '=', i*k)
print(ggg)
}
}
}
gg(1)
while (T) {
for (i in 1:4) {
line <- ''
if (i != 4) {
for (k in 1:(3 - (i - 1)))
line <- str_c(line, ' ')
}
for (k in 1:(2*i - 1))
line <- str_c(line, '#')
print(line)
}
for (i in 3:1) {
line <- ''
for (k in 1:(3 - (i - 1)))
line <- str_c(line, ' ')
for (k in 1:(2*i - 1))
line <- str_c(line, '#')
print(line)
}
break;
}
d <- paste(!)
while(w<4) {
d <- paste(!)
print(d)
}
while(w<4) {
d <- w
print(d)
}
print(w)
while(w<4) {
print(w)
}
w <- 0
while(w<4) {
print(w)
}
library(KoNLP)
library(wordcloud)
useSejongDic()
data1 <- readLines('remake2.txt')
### 예제 1-2. 여고생은 어디를 가장 고치고 싶을까요?
setwd('D:/Heechul/R/R_Lecture/part2/stage1_Word Cloud/ch1-1')
data1 <- readLines('remake2.txt')
data1
data2 <- sapply(data1, extractNoun, USE.NAMES = F)
data2
data3 <- unlist(data2)
data3
data3 <- Filter(function(x) {nchar(x) <= 10}, data3) # 필터해서 10글자 이하만 남게
data3 <- Filter(function(x) {nchar(x) >= 2}, data3) # 필터해서 10글자 이하만 남게
data3
txt <- readLines('성형부작용gsub.txt')     # 제거하고 싶은 단어 목록을 불러옴
txt <- readLines('성형부작용gsub.txt')     # 제거하고 싶은 단어 목록을 불러옴
txt
cnt_txt <- length(txt)
cnt_txt
for(i in 1:cnt_txt) {
data3 <- gsub((txt[i]),'', data3)  # i가 1일때 첫번째 단어 '' 바꾸고 다시 돌아가서 2번째 실행
}
data3
write(unlist(data3), 'remake2_2.txt')
data4 <- read.table('remake2_2.txt')
data4
nrow(data4)
wordcount <- table(data4)
wordcount
head(sort(wordcount, decreasing = T),20)
data3 <- gsub('\\d+','', data3)
data3 <- gsub('\\.','', data3)     #
data3 <- gsub(' ','', data3)
data3 <- gsub("\\'",'', data3)     #
write(unlist(data3), 'remake2_2.txt')
data4 <- read.table('remake2_2.txt')
data4
nrow(data4)
wordcount <- table(data4)
wordcount
head(sort(wordcount, decreasing = T),20)
library(RColorBrewer)
palete <- brewer.pal(9, 'Set2')
palete <- brewer.pal(9, 'Set1')
palete <- brewer.pal(8, 'Set2')
wordcloud(names(wordcount), freq=wordcount, scale=c(3,0.2), rot.per = 0.25,
min.freq = 2, random.order = F, random.color = T, colors = palete)
wordcloud(names(wordcount), freq=wordcount, scale=c(4,0.2), rot.per = 0.25,
min.freq = 2, random.order = F, random.color = T, colors = palete)
legend(0.2, 1, '성형수술 부작용 관련 키워드 분석', cex=0.6, fill=NA, border=NA,
bg='white', text.col='red', text.font=1, box.col='black')
legend(0.2, 1, '성형수술 부작용 관련 키워드 분석', cex=0.7, fill=NA, border=NA,
bg='white', text.col='red', text.font=1, box.col='black')
legend(0.2, 1, '성형수술 부작용 관련 키워드 분석', cex=0.7, fill=NA, border=NA,
bg='white', text.col='red', text.font=4, box.col='black')
### 예제 1-3. 제주도 추천 여행코스 찾기
setwd('D:/Heechul/R/R_Lecture/part2/stage1_Word Cloud/ex1-3')
library(KoNLP)
library(wordcloud)
useSejongDic()
install.packages('stringr')
install.packages("stringr")
library(stringr)
library(KoNLP)
library(wordcloud)
library(stringr)
useSejongDic()
txt <- readLines('jeju.txt')
txt
place <- sapply(txt, extractNoun, USE.NAMES = F)
place
cdata <- unlist(place)
place <- str_replace_all(cdata,'[^[:alpha:]]','')     # 한글, 영어 외는 삭제
place <- gsub(' ','', place)
# 지울 단어 불러와서 반복문으로 지우기
txt <- readLines('제주도여행코스gsub.txt')
txt
cnt_txt <- length(txt)
cnt_txt
i <- 1
for(i in 1:cnt_txt) {
place <- gsub((txt[i]), '', place)
}
place
# 필터링으로 지우기
place <- Filter(function(x){nchar >=2}, place)
# 필터링으로 지우기
place <- Filter(function(x){nchar(x) >=2}, place)
place
# 저장후 테이블로 불러서 공백 지우기
write(unlist(place), 'jeju_2.txt')
rev <- read.table('jeju_2.txt')
rev
nrow(rev)
wordcount <- table(rev)
wordcount
head(sort(wordcount, decreasing = T), 20)
# 워드크라우드 생성
library(RColorBrewer)
palete <- brewer.pal(9, 'Set1')
wordcloud(names(wordcount), freq=wordcount, scale=c(4,0.2), rot.per = 0.25,
min.freq = 2, random.order = F, random.color = T, colors = palete)
wordcloud(names(wordcount), freq=wordcount, scale=c(3,0.2), rot.per = 0.25,
min.freq = 2, random.order = F, random.color = T, colors = palete)
wordcloud(names(wordcount), freq=wordcount, scale=c(2,0.2), rot.per = 0.25,
min.freq = 2, random.order = F, random.color = T, colors = palete)
legend(0.2, 1, '제주도 추천 여행 코스 분석', cex=0.7, fill=NA, border=NA,
bg='white', text.col='red', text.font=4, box.col='red')
legend(0.2, 1, '제주도 추천 여행 코스 분석', cex=0.5, fill=NA, border=NA,
bg='white', text.col='red', text.font=4, box.col='red')
legend(0.5, 1, '제주도 추천 여행 코스 분석', cex=0.5, fill=NA, border=NA,
bg='white', text.col='red', text.font=4, box.col='red')
legend(0.3, 1, '제주도 추천 여행 코스 분석', cex=0.5, fill=NA, border=NA,
bg='white', text.col='red', text.font=4, box.col='red')
wordcloud(names(wordcount), freq=wordcount, scale=c(2,0.2), rot.per = 0.25,
min.freq = 2, random.order = F, random.color = T, colors = palete)
legend(0.3, 1, '제주도 추천 여행 코스 분석', cex=0.5, fill=NA, border=NA,
bg='white', text.col='red', text.font=4, box.col='red')
### 도전미션 1-2. 블로거들이 추천하는 서울 명소 분석하기
setwd('D:/Heechul/R/R_Lecture/part2/stage1_Word Cloud/초1-2')
library(KoNLP)
library(wordcloud)
library(stringr)
useSejongDic()
txt <- readLines('seoul_go.txt')
### 도전미션 1-2. 블로거들이 추천하는 서울 명소 분석하기
setwd('D:/Heechul/R/R_Lecture/part2/stage1_Word Cloud/ch1-2')
txt <- readLines('seoul_go.txt')
txt
place <- sapply(txt, extractNoun, USE.NAMES = F)
place
cdata <- unlist(place)
place
# str_replace_all(원본데이터),찾을글자,바꿀글자)
place <- str_replace_all(cdata,'[^[:alpha:]]','')     # 한글, 영어 외는 삭제
place <- gsub(' ','', place)
place
# 필터링으로 지우기
place <- Filter(function(x){nchar(x) >=2}, place)
place
# 저장후 테이블로 불러서 공백 지우기
write(unlist(place), 'seoul_go_2.txt')
rev <- read.table('seoul_go_2.txt')
rev
nrow(rev)
wordcount <- table(rev)
wordcount
head(sort(wordcount, decreasing = T), 20)
# 지울 단어 불러와서 반복문으로 지우기
txt <- readLines('seoul_gogsub.txt')
txt
cnt_txt <- length(txt)
cnt_txt
i <- 1
for(i in 1:cnt_txt) {
place <- gsub((txt[i]), '', place)
}
place
# 저장후 테이블로 불러서 공백 지우기
write(unlist(place), 'seoul_go_2.txt')
rev <- read.table('seoul_go_2.txt')
rev
nrow(rev)
wordcount <- table(rev)
wordcount
head(sort(wordcount, decreasing = T), 20)
# 워드크라우드 생성
library(RColorBrewer)
palete <- brewer.pal(8, 'Set2')
wordcloud(names(wordcount), freq=wordcount, scale=c(2,0.2), rot.per = 0.25,
min.freq = 2, random.order = F, random.color = T, colors = palete)
palete <- brewer.pal(9, 'Set3')
palete <- brewer.pal(9, 'Set1')
wordcloud(names(wordcount), freq=wordcount, scale=c(2,0.2), rot.per = 0.25,
min.freq = 2, random.order = F, random.color = T, colors = palete)
legend(0.3, 1, '블로거들이 추천하는 서울 명소 분석하기', cex=0.5, fill=NA, border=NA,
bg='white', text.col='red', text.font=4, box.col='red')
legend(0.3, 1, '블로거들이 추천하는 서울 명소 분석하기', cex=0.8, fill=NA, border=NA,
bg='white', text.col='red', text.font=4, box.col='red')
legend(0.2, 1, '블로거들이 추천하는 서울 명소 분석하기', cex=0.8, fill=NA, border=NA,
bg='white', text.col='red', text.font=4, box.col='red')
wordcloud(names(wordcount), freq=wordcount, scale=c(2,0.2), rot.per = 0.25,
min.freq = 2, random.order = F, random.color = T, colors = palete)
legend(0.2, 1, '블로거들이 추천하는 서울 명소 분석하기', cex=0.8, fill=NA, border=NA,
bg='white', text.col='red', text.font=4, box.col='red')
### 예제 1-4. 연설문 분석 후 Word Cloud 생성하기
setwd('D:/Heechul/R/R_Lecture/part2/stage1_Word Cloud/ex1-4')
library(KoNLP)
library(wordcloud)
library(stringr)
useSejongDic()
### 예제 1-5. 대통령 신년 연설문 분석으로 정책 변화 예측하기
setwd('D:/Heechul/R/R_Lecture/part2/stage1_Word Cloud/ex1-5')
install.packages('tm')
library(tm)
library(KoNLP)
library(wordcloud)
library(stringr)
library(tm)
useSejongDic()
### 예제 1-6. 영어 문석 분석하기-스티브 잡스님 연설문 분석하기
setwd('D:/Heechul/R/R_Lecture/part2/stage1_Word Cloud/ex1-6')
txt <- readLines('tm_test1.txt')
txt
## 데이터 불러오기
data1 <- readLines('tm_test1.txt')
data1
class(data1)
## 2. 위 4줄을 tm 패키지가 처리할 수 있는 형태인 Corpus(말뭉치) 형태로 변환
corp <- Corpus(VectorSource(data1))
corp
## 2. 위 4줄을 tm 패키지가 처리할 수 있는 형태인 Corpus(말뭉치) 형태로 변환
corp1 <- Corpus(VectorSource(data1))
corp1
inspect(corp1)
tdm <- TermDocumentMatrix(corp1)
tdm
m <- as.matrix(tdm)
m <- as.matrix(tdm)
m <- as.matrix(tdm)
m
corp2 <- tm_map(cor1, stripWhitespace)
corp2 <- tm_map(corp1, stripWhitespace)
corp2
tdm <- TermDocumentMatrix(corp2)
tdm
tdm2 <- TermDocumentMatrix(corp2)
tdm2
m2 <- as.matrix(tdm2)
m2
corp2 <- tm_map(corp2, tolower)
corp2 <- tm_map(corp2, removeNumbers)
corp2 <- tm_map(corp2, removePunctuation)
corp2 <- tm_map(corp1, stripWhitespace)
corp2 <- tm_map(corp2, tolower)
corp2 <- tm_map(corp2, removeNumbers)
corp2 <- tm_map(corp2, removePunctuation)
sword2 <- c(stopwords('en'), 'and', 'but', 'not')
corp2 <- tm_map(corp2, removeWords,sword2)
tdm2 <- TermDocumentMatrix(corp2)
tdm2
m2 <- as.matrix(tdm2)
m2
class(m2)
colnames(m2) <- c(1:4)
m2
m2
freq <- sort(rowSums(m2), decreasing=T)
head(freq1, 20)
freq1 <- sort(rowSums(m2), decreasing=T)
head(freq1, 20)
freq2 <- sort(clSums(m2), decreasing = T)
head(freq2,20)
freq2 <- sort(colSums(m2), decreasing = T)
head(freq2,20)
findFreqTerms(tdm2,2)
findAssocs(tdm2,'apple', 0.5)
findAssocs(tdm2,'apple', 0.6)
library(RColorBrewer)
palete <- brewer.pal(7, 'Set3')
wordcloud(names(freq1), freq=freq1, scale = c(5,1), min.freq = 1, colors = palete,
random.order = F, random.color = T, color=T)
wordcloud(names(freq1), freq=freq1, scale = c(5,0.5), min.freq = 1, colors = palete,
random.order = F, random.color = T, color=T)
wordcloud(names(freq1), freq=freq1, scale = c(2,0.5), min.freq = 1, colors = palete,
random.order = F, random.color = T, color=T)
wordcloud(names(freq1), freq=freq1, scale = c(6,0.5), min.freq = 1, colors = palete,
random.order = F, random.color = T, color=T)
wordcloud(names(freq1), freq=freq1, scale = c(5,0.5), min.freq = 1, colors = palete,
random.order = F, random.color = T, color=T)
wordcloud(names(freq1), freq=freq1, scale = c(4,0.5), min.freq = 1, colors = palete,
random.order = F, random.color = T, color=T)
wordcloud(names(freq1), freq=freq1, scale = c(3,0.5), min.freq = 1, colors = palete,
random.order = F, random.color = T, color=T)
legend(0.2, 1, 'tm package test #1', cex=1, fill=NA, border=NA,
bg='white', text.col='red', text.font=2, box.col='red')
barplot(freq1, main='tm package test #2', las2, ylim=c(0,5))
barplot(freq1, main='tm package test #2', las2, ylim=c(0,5))
barplot(freq1, main='tm package test #2', las=2, ylim=c(0,5))
library(ggplot2)
freq1
ggplot(freq1,) +
geom_bar()
df_freq1 <- data.frame(freq3)
### 예제 2-1. '제주도 여행코스 추천' 검색어 결과를 그래프로 표시하기
setwd('D:/Heechul/R/R_Lecture/part2/stage2/ex2-1')
library(dplyr)
library(RColorBrewer)
library(KoNLP)
library(wordcloud)
library(stringr)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
useSejongDic()
mergeUserDic(data.frame(readLines('제주도여행지.txt'), 'ncn'))
txt <- readLines('jeju.txt')
txt
place <- sapply(txt, extractNoun, USE.NAMES = F)
place
cdata <- unlist(place)
cdata
place <- str_replace_all(cdata, '[^[:alpha:]]','')
place
place <- gsub(' ','', place)
place
txt <- readLines('제주도여행코스gsub.txt')
txt
cnt_txt <- length(txt)
cnt_txt
i <- 1
for(i in 1:cnt_txt) {
place <- gsub((txt[i]), '', place)
}
place
place <- Filter(function(x) {nchar(x) >= 2}, place)
place
write(unlist(place), 'jeju_2.txt')
rev <- read.table('jeju_2.txt')
rev
nrow(rev)
wordcount <- table(rev)
wordcount
head(sort(wordcount, decreasing = T), 20)
palete <- brewer.pal(7, 'Set3')
wordcloud(names(wordcount), freq=wordcount, scale = c(3,0.5), min.freq = 2, colors = palete,
random.order = F, random.color = T, color=T)
wordcloud(names(wordcount), freq=wordcount, scale = c(3,0.2), min.freq = 2, colors = palete,
random.order = F, random.color = T, color=T)
wordcloud(names(wordcount), freq=wordcount, scale = c(3,0.1), min.freq = 2, colors = palete,
random.order = F, random.color = T, color=T)
legend(0.2, 1, '제주도 추천 여행 코스', cex=1, fill=NA, border=NA,
bg='white', text.col='red', text.font=2, box.col='red')
legend(0.2, 1, '제주도 추천 여행 코스', cex=0.5, fill=NA, border=NA,
bg='white', text.col='red', text.font=2, box.col='red')
wordcloud(names(wordcount), freq=wordcount, scale = c(3,0.1), min.freq = 2, colors = palete,
random.order = F, random.color = T, color=T)
legend(0.2, 1, '제주도 추천 여행 코스', cex=0.6, fill=NA, border=NA,
bg='white', text.col='red', text.font=2, box.col='red')
legend(0.5, 1, '제주도 추천 여행 코스', cex=0.6, fill=NA, border=NA,
bg='white', text.col='red', text.font=2, box.col='red')
legend(0.3, 1, '제주도 추천 여행 코스', cex=0.6, fill=NA, border=NA,
bg='white', text.col='red', text.font=2, box.col='red')
wordcloud(names(wordcount), freq=wordcount, scale = c(3,0.1), min.freq = 2, colors = palete,
random.order = F, random.color = T, color=T)
legend(0.3, 1, '제주도 추천 여행 코스', cex=0.6, fill=NA, border=NA,
bg='white', text.col='red', text.font=2, box.col='red')
### top10만 뽑아서 그래프 만들어 보기
top10 <- head(sort(wordcount, decreasing = T), 10)
top10
