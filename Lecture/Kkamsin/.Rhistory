# read.csv.sql
install.packages('googleVis')
# read.csv.sql
install.packages('googleVis')
install.packages('googleVis')
install.rtools(f,f)
install.packages('googleVis')
install.packages('googleVis')
library()
install.packages('googleVis')
install.packages(c('googleVis')
install.packages(c('googleVis')
install.rtools(f,f)
install.packages(c('googleVis')
install.packages('googleVis')
install.packages('googleVis')
install.packages('googleVis')
# 연습문제
#1. 구구단
for (i in 2:9) {
line <- str_c(i, '단')
print(line)
for (k in 1:9) {
line <- str_c(i, ' * ', k, ' = ', i*k)
print(line)
}
}
# 연습문제
#1. 구구단
library(stringr)
for (i in 2:9) {
line <- str_c(i, '단')
print(line)
for (k in 1:9) {
line <- str_c(i, ' * ', k, ' = ', i*k)
print(line)
}
}
for (i in 2:9) {
x <- paste(i, '단')
print(x)
}
for (i in 2:9) {
x <- paste(i, '단')
print(x)
for(k in 1:9) {
x <- print(paste(i, '*', K, '=', i*l))
}
}
for (i in 2:9) {
x <- paste(i, '단')
print(x)
for(k in 1:9) {
x <- paste(i, '*', K, '=', i*l)
print(x)
}
}
for (i in 2:9) {
x <- paste(i, '단')
print(x)
for(k in 1:9) {
x <- paste(i, '*', K, '=', i*k)
print(x)
}
}
for (i in 2:9) {
x <- paste(i, '단')
print(x)
for(k in 1:9) {
x <- paste(i, '*', K, '=', i*k)
print(x)
}
}
for (i in 2:9) {
x <- paste(i, '단')
print(x)
for(k in 1:9) {
x <- paste(i, '*', k, '=', i*K)
print(x)
}
}
for (i in 2:9) {
line <- str_c(i, '단')
print(line)
for (k in 1:9) {
line <- str_c(i, ' * ', k, ' = ', i*k)
print(line)
}
}
for (i in 2:9) {
line <- paste(i, '단')
print(line)
for(k in 1:9) {
line <- paste(i, '*', k, '=', i*K)
print(line)
}
}
for (i in 2:9) {
line <- paste(i, '단')
print(line)
for(k in 1:9) {
line <- paste(i, '*', k, '=', i*k)
print(line)
}
}
for (i in 2:9) {
line <- paste(i, '단')
print(line)
for(k in 1:9) {
line <- paste(i, '*', k, '=', i*k)
print(line)
}
}
for(i in 2:9) {
print(i)
}
for(i in 2:9) {
gugudan <- paste(i, '단')
print(i)
}
for(i in 2:9) {
gugudan <- paste(i, '단')
print(gugudan)
}
for(i in 2:9) {
gugudan <- paste(i, '단')
print(gugudan)
for(k in 1:9) {
ggg <- paste(i, '*', k, '=', i*k)
print(ggg)
}
}
gg <- function(x) {
for(i in 2:9) {
gugudan <- paste(i, '단')
print(gugudan)
for(k in 1:9) {
ggg <- paste(i, '*', k, '=', i*k)
print(ggg)
}
}
}
gg(1)
while (T) {
for (i in 1:4) {
line <- ''
if (i != 4) {
for (k in 1:(3 - (i - 1)))
line <- str_c(line, ' ')
}
for (k in 1:(2*i - 1))
line <- str_c(line, '#')
print(line)
}
for (i in 3:1) {
line <- ''
for (k in 1:(3 - (i - 1)))
line <- str_c(line, ' ')
for (k in 1:(2*i - 1))
line <- str_c(line, '#')
print(line)
}
break;
}
d <- paste(!)
while(w<4) {
d <- paste(!)
print(d)
}
while(w<4) {
d <- w
print(d)
}
print(w)
while(w<4) {
print(w)
}
w <- 0
while(w<4) {
print(w)
}
setwd('D:/Heechul/R_Data_Analysis/Lecture/Kkamsin')
ky <- read.csv('data/KY.csv', header = T, sep = ',')
ky
install.packages('pwr')
library(pwr)
mean.1 <- mean(KY$score[KY$group == 1])
mean.2 <- mean(KY$score[KY$group == 2])
mean.1
# 각 그룹의 평균
mean.1 <- mean(KY$score[KY$group == 1])
ky
# 각 그룹의 평균
mean.1 <- mean(ky$score[KY$group == 1])
mean.1
# 각 그룹의 평균
mean.1 <- mean(ky$score[ky$group == 1])
mean.1
mean.2 <- mean(ky$score[ky$group == 2])
mean.2
# 각 그룹의 표준편차
sd.1 <- sd(ky$score[ky$group == 1])
sd.1
sd.2 <- sd(ky$score[ky$group == 2])
sd.2
# 전체 데이터를 살펴보자
summary(ky)
# 전체 열 갯수
nrow(ky)
# 전체 행의 갯수
length(ky)
mean.1
# effect size 를 구하는 코드
effectiveSize <- abs(mean.1-mean.2) / sqrt(s.1^2 / s.2^2)
# effect size 를 구하는 코드
effectiveSize <- abs(mean.1-mean.2) / sqrt(sd.1^2 / sd.2^2)
effectiveSize
pwr.t.test(d= effectSize,power=.8,sig.level=.05,type="two.sample",alternative="two.sided")
effectiveSize
pwr.t.test(d= effectSize, power=.8, sig.level=.05,
type="two.sample", alternative="two.sided")
pwr.t.test(d= effectiveSize, power=.8, sig.level=.05,
type="two.sample", alternative="two.sided")
# effect size 를 구하는 코드
effectSize <- abs(mean.1-mean.2) / sqrt(sd.1^2 / sd.2^2)
pwr.t.test(d= effectSize, power=.8, sig.level=.05,
type="two.sample", alternative="two.sided")
# effect size 를 구하는 코드
effectSize <- abs(mean.1-mean.2) / sqrt(sd.1^2 / sd.2^2)
effectSize
pwr.t.test(d= effectSize, power=.8, sig.level=.05,
type="two.sample", alternative="two.sided")
# 필요 패키지
library(pwr)
pwr.t.test(d= effectSize, power=.8, sig.level=.05,
type="two.sample", alternative="two.sided")
# effect size 를 구하는 코드
effectSize <- abs(mean.1-mean.2)/(sqrt((sd.1^2+sd.2^2)/2))
effectSize
pwr.t.test(d= effectSize, power=.8, sig.level=.05,
type="two.sample", alternative="two.sided")
