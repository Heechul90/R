3, 'Banana', 100, 4,
4, 'Grape',  50, 7), nrow=4, byrow=T)
sales2
df1 <- data.frame(sales2)
df1
names(df1) <- c('NO', 'NAME', 'PRICE', 'QTY')
df1
sales
sales$NAME
sales[1,3]
sales[1,3]
sales[,3]
sales$PRICE
sales[c(1,2),]
sales[,c(1,2)]
sales[,c(1:3)]
subset(sales , QTY<5)
subset(sales , QTY<5)
subset(sales, PRICE==500)
subset(sales, PRICE!=500)
subset(sales, NAME=='Grape')
no <- c(1,2,3,)
name <- c('apple', 'banana', 'peach')
price <- c(100,200,300)
df1 <- data.frame(NO=no, NAME=name, PRICE=price)
df1
no <- c(1,2,3)
df1
no <- c(1,2,3)
name <- c('apple', 'banana', 'peach')
price <- c(100,200,300)
df1 <- data.frame(NO=no, NAME=name, PRICE=price)
df1
no <- c(10,20,30)
name <- c('train', 'car', 'airplane')
price <- c(1000,2000,3000)
df2 <- data.frame(NO=no, NAME=name, PRICE=price)
df2
df3 <- cbind(df1, df2)
df3
df3$NAME
df3[,5]
df5<- rbind(df1, df2)
df5
df1 <- data.frame(name=c('apple', 'banana', 'cherry'), price=c(300,200,100))
df1
df5 <- data.frame(name=c('apple', 'banana', 'cherry'), price=c(300,200,100))
df5
df6 <- data.frame(name=c('apple', 'cherry', 'berry'), qty=c(10,20,30))
df6
merge(df5,df6)
merge(df5,df6, all=T)
cbind(df5,df6)
rbind(df5,df6)
cbind(df6,df5)
df1
new <- data.frame(name= 'mango', price=400)
df1<- rbind(df1,new)
df1
df1 <- rbind(df1, data.frame(name= 'berry', price= 500))
df1
df1 <- cbind(df1, data.frame(qty=c(10,20,30,40,50)))
df1
no <- c(1,2,3,4,5)
no <- c(1,2,3,4,5)
name <- c('서진수', '주시현', '최경우', '이동근', '윤정웅')
address <- c('서울', '대전', '포항', '경주', '경기')
tel <- c(1111, 2222, 3333, 4444, 5555)
hoby <- c('독서', '미술', '놀고먹기', '먹고놀기', '노는애감시하기')
member <- data.frame(NO=no, NAME=name, ADDRESS=address, TEL=tel, HOBY= hoby)
member
member2 <- subset(member, select = c(NO, NAME, TEL))
member2
member3 <- subset(member, select = -TEL)
member3
colnames(member3) <- c('번호', '이름', '주소', '취미')
member3
sales
ncol(sales)
nrow(sales)
names(sales)
rownames(sales)
sales[c(2,3,1,),]
sales[c(2,3,1,), ]
sales[c(2,3,1,4), ]
list.files()
rm(list=ls())
seasons <- matrix(c('봄', '여름', '가을', '겨울'), nrow=2)
seasons <- matrix(c('봄', '여름', '가을', '겨울'), nrow=2); seasons
seasons <- matrix(c('봄', '여름', '가을', '겨울'), nrow=2, byrow=T)
seasons
seasons[,2]
seasons2 <- rbind(seasons, c('초봄', '초가을'))
seasons2
seasons3 <- cbind(seasons2, c('초여름', '초겨울', '한겨울'))
seasons3
no <- c(1,2,3,4)
name <- c('Apple', 'Peach', 'Banana', 'Grape')
Price <- c(500, 200, 100, 50)
rm(Price)
price <- c(500, 200, 100, 50)
qty <- c(5, 2, 4, 7)
sales <- data.frame(NO=no, NAME=name, PRICE=price, QTY=qty)
sales
sales1 <- data.frame(NO1=no1, NAME1=name1, PRICE1=price1, QTY1=qty1)
no1 <- c(1,2,3,4)
name1 <- c('Apple', 'Peach', 'Banana', 'Grape')
price1 <- c(200, 100, 50)
qty1 <- c(5, 2, 4, 7)
sales1 <- data.frame(NO1=no1, NAME1=name1, PRICE1=price1, QTY1=qty1)
price1 <- c(500, 200, 100, 50)
sales1 <- data.frame(NO1=no1, NAME1=name1, PRICE1=price1, QTY1=qty1)
sales1
price1 <- c(NULL, 200, 100, 50)
sales1 <- data.frame(NO1=no1, NAME1=name1, PRICE1=price1, QTY1=qty1); sales1
price1 <- c('NULL', 200, 100, 50)
sales1 <- data.frame(NO1=no1, NAME1=name1, PRICE1=price1, QTY1=qty1); sales1
sales
sales$NO
sales$NAME
sales[1,4]
sales[,4]
sales[0,4]
sales(c(1,2),)
sales[c(1,2),]
sales[c(1:3),]
subset(sales, PRICE>150)
subset(sales, price>150)
subset(sales, price>150)
rm(list(ls))
rm(list=ls())
rm(list=ls())
scan <- scan('scan_1.txt')
scan <- scan('scan_1.txt')
# 그래프 그리기
ggplot(age_income, aes(x=birth, y= mean_income)) +
geom_line(linetype=1, aes(y= mean_income, color= 'darkblue'), size=1) +
scale_color_discrete(name = "평균월급", labels = '평균월급') +
ggtitle('나이에 따른 평균월급') +
xlab('나이') +
ylab('평균월급') +
theme_bw() +
theme(plot.title = element_text(size=15, color = 'red',
hjust = 0.5, vjust = 0)) +
theme(axis.title.x = element_text(size=10, color = 'blue',
hjust=0.5, vjust = 0)) +
theme(axis.title.y = element_text(size=10, color = 'green',
hjust=0.5, vjust = 0)) +
theme(axis.text.x = element_text(angle = 0, size = 10, color = 5)) +
theme(axis.text.y = element_text(size=10, color=6))
library(foreign)
library(dplyr)
library(ggplot2)
library(readxl)
# 그래프 그리기
ggplot(age_income, aes(x=birth, y= mean_income)) +
geom_line(linetype=1, aes(y= mean_income, color= 'darkblue'), size=1) +
scale_color_discrete(name = "평균월급", labels = '평균월급') +
ggtitle('나이에 따른 평균월급') +
xlab('나이') +
ylab('평균월급') +
theme_bw() +
theme(plot.title = element_text(size=15, color = 'red',
hjust = 0.5, vjust = 0)) +
theme(axis.title.x = element_text(size=10, color = 'blue',
hjust=0.5, vjust = 0)) +
theme(axis.title.y = element_text(size=10, color = 'green',
hjust=0.5, vjust = 0)) +
theme(axis.text.x = element_text(angle = 0, size = 10, color = 5)) +
theme(axis.text.y = element_text(size=10, color=6))
# 그래프 그리기
ggplot(age_income, aes(x=birth, y= mean_income)) +
geom_line(linetype=1, aes(y= mean_income, color= 'darkblue'), size=1) +
scale_color_discrete(name = "평균월급", labels = '평균월급') +
ggtitle('나이에 따른 평균월급') +
xlab('나이') +
ylab('평균월급') +
theme_bw() +
theme(plot.title = element_text(size=15, color = 'red',
hjust = 0.5, vjust = 0)) +
theme(axis.title.x = element_text(size=10, color = 'blue',
hjust=0.5, vjust = 0)) +
theme(axis.title.y = element_text(size=10, color = 'green',
hjust=0.5, vjust = 0)) +
theme(axis.text.x = element_text(angle = 0, size = 10, color = 5)) +
theme(axis.text.y = element_text(size=10, color=6))
View(df6)
library(foreign)
library(dplyr)
library(ggplot2)
library(readxl)
### 데이터 분석 프로젝트
### 한국인의 삶을 파악하라!
setwd('D:/Heechul/R_Data_Analysis/Lecture/part2/stage6/ex6-4')
## 2)데이터 준비하기
# 데이터 불러오기
raw_welfare <- read.spss(file = 'data/Koweps_hpc10_2015_beta1.sav',
to.data.frame = T)
# 복사본 만들기
welfare <- raw_welfare
## 4) 변수명 바꾸기
welfare <- rename(welfare,
sex = h10_g3,              # 성별
birth = h10_g4,            # 태어난 연도
marriage = h10_g10,        # 혼인상태
religion = h10_g11,        # 종교
code_job = h10_eco9,       # 직종
income = p1002_8aq1,       # 일한달의 월 평균 임금
code_region = h10_reg7)    #7개 권역별 지역구분
# 이상치 결측 처리 (남자 = 1, 여자 = 2)
welfare$sex <- ifelse(welfare$sex == 9, NA, welfare$sex)
# 결측치 확인하기
table(is.na(welfare$sex))
# 성별 항목에 이름 부여
welfare$sex <- ifelse(welfare$sex == 1, 'male', 'female')
# 이상치 결측 처리
welfare$income <- ifelse(welfare$income %in% c(0, 9999), NA, welfare$income)
## 3) 성별에 따른 월급 분석하기
# 성별 월급 평균표 만들기
sex_income <- welfare %>%
filter(!is.na(income)) %>%
group_by(sex) %>%
summarise(mean_income = mean(income))
# 그래프 그리기
ggplot(sex_income, aes(x= sex, y = mean_income, fill= sex)) +
geom_bar(stat = 'identity') +
ggtitle('성별에 따른 평균월급') +
xlab('성별') +
ylab('평균월급') +
theme_classic() +
theme(plot.title = element_text(size=15, color = 'red',
hjust = 0.5, vjust=0)) +
theme(axis.title.x = element_text(size = 10, color = 'blue',
hjust = 0.5, vjust = 0)) +
theme(axis.title.y = element_text(size= 10, color = 'green',
hjust = 0.5, vjust = 0)) +
theme(axis.text.x = element_text(angle=45, size = 10, color=6)) +
theme(axis.text.y = element_text(angle=0, size = 10, color=9)) +
theme(legend.title = element_text(face="italic", colour="darkblue",size=10)) +
geom_text(aes(y=mean_income - 5, label= paste(round(mean_income,1), '만원')),
color='black', size=5)
# 이상치 결측 처리
welfare$birth <- ifelse(welfare$birth == 9999, NA, welfare$birth)
table(is.na(welfare$birth))
## 2) 년도를 나이로 파생변수 만들어 주기
welfare$birth <- 2015 - welfare$birth + 1
welfare$birth
summary(welfare$birth)
## 3) 나이와 월급 관계 분석
# 나이와 평균월급표 만들기
age_income <- welfare %>%
filter(!is.na(income)) %>%
group_by(birth) %>%
summarise(mean_income = mean(income))
age_income
# 그래프 그리기
ggplot(age_income, aes(x=birth, y= mean_income)) +
geom_line(linetype=1, aes(y= mean_income, color= 'darkblue'), size=1) +
scale_color_discrete(name = "평균월급", labels = '평균월급') +
ggtitle('나이에 따른 평균월급') +
xlab('나이') +
ylab('평균월급') +
theme_bw() +
theme(plot.title = element_text(size=15, color = 'red',
hjust = 0.5, vjust = 0)) +
theme(axis.title.x = element_text(size=10, color = 'blue',
hjust=0.5, vjust = 0)) +
theme(axis.title.y = element_text(size=10, color = 'green',
hjust=0.5, vjust = 0)) +
theme(axis.text.x = element_text(angle = 0, size = 10, color = 5)) +
theme(axis.text.y = element_text(size=10, color=6))
# 그래프 그리기
ggplot(age_income, aes(x=birth, y= mean_income)) +
geom_line(linetype=1, color= 'darkblue'), size=1) +
scale_color_discrete(name = "평균월급", labels = '평균월급') +
ggtitle('나이에 따른 평균월급') +
xlab('나이') +
ylab('평균월급') +
theme_bw() +
theme(plot.title = element_text(size=15, color = 'red',
hjust = 0.5, vjust = 0)) +
theme(axis.title.x = element_text(size=10, color = 'blue',
hjust=0.5, vjust = 0)) +
theme(axis.title.y = element_text(size=10, color = 'green',
hjust=0.5, vjust = 0)) +
theme(axis.text.x = element_text(angle = 0, size = 10, color = 5)) +
theme(axis.text.y = element_text(size=10, color=6))
# 그래프 그리기
ggplot(age_income, aes(x=birth, y= mean_income)) +
geom_line(linetype=1, color= 'darkblue', size=1) +
scale_color_discrete(name = "평균월급", labels = '평균월급') +
ggtitle('나이에 따른 평균월급') +
xlab('나이') +
ylab('평균월급') +
theme_bw() +
theme(plot.title = element_text(size=15, color = 'red',
hjust = 0.5, vjust = 0)) +
theme(axis.title.x = element_text(size=10, color = 'blue',
hjust=0.5, vjust = 0)) +
theme(axis.title.y = element_text(size=10, color = 'green',
hjust=0.5, vjust = 0)) +
theme(axis.text.x = element_text(angle = 0, size = 10, color = 5)) +
theme(axis.text.y = element_text(size=10, color=6))
# 복사본 만들기
welfare <- raw_welfare
## 4) 변수명 바꾸기
welfare <- rename(welfare,
sex = h10_g3,              # 성별
birth = h10_g4,            # 태어난 연도
marriage = h10_g10,        # 혼인상태
religion = h10_g11,        # 종교
code_job = h10_eco9,       # 직종
income = p1002_8aq1,       # 일한달의 월 평균 임금
code_region = h10_reg7)    #7개 권역별 지역구분
# 이상치 결측 처리 (남자 = 1, 여자 = 2)
welfare$sex <- ifelse(welfare$sex == 9, NA, welfare$sex)
# 성별 항목에 이름 부여
welfare$sex <- ifelse(welfare$sex == 1, 'male', 'female')
# 이상치 결측 처리
welfare$income <- ifelse(welfare$income %in% c(0, 9999), NA, welfare$income)
## 3) 성별에 따른 월급 분석하기
# 성별 월급 평균표 만들기
sex_income <- welfare %>%
filter(!is.na(income)) %>%
group_by(sex) %>%
summarise(mean_income = mean(income))
sex_income
# 그래프 그리기
ggplot(sex_income, aes(x= sex, y = mean_income, fill= sex)) +
geom_bar(stat = 'identity') +
ggtitle('성별에 따른 평균월급') +
xlab('성별') +
ylab('평균월급') +
theme_classic() +
theme(plot.title = element_text(size=15, color = 'red',
hjust = 0.5, vjust=0)) +
theme(axis.title.x = element_text(size = 10, color = 'blue',
hjust = 0.5, vjust = 0)) +
theme(axis.title.y = element_text(size= 10, color = 'green',
hjust = 0.5, vjust = 0)) +
theme(axis.text.x = element_text(angle=45, size = 10, color=6)) +
theme(axis.text.y = element_text(angle=0, size = 10, color=9)) +
theme(legend.title = element_text(face="italic", colour="darkblue",size=10)) +
geom_text(aes(y=mean_income - 5, label= paste(round(mean_income,1), '만원')),
color='black', size=5)
# 이상치 결측 처리
welfare$birth <- ifelse(welfare$birth == 9999, NA, welfare$birth)
## 2) 년도를 나이로 파생변수 만들어 주기
welfare$age <- 2015 - welfare$birth + 1
welfare$age
summary(welfare$age)
## 3) 나이와 월급 관계 분석
# 나이와 평균월급표 만들기
age_income <- welfare %>%
filter(!is.na(income)) %>%
group_by(age) %>%
summarise(mean_income = mean(income))
age_income
# 그래프 그리기
ggplot(age_income, aes(x=age, y= mean_income)) +
geom_line(linetype=1, color= 'darkblue', size=1) +
scale_color_discrete(name = "평균월급", labels = '평균월급') +
ggtitle('나이에 따른 평균월급') +
xlab('나이') +
ylab('평균월급') +
theme_bw() +
theme(plot.title = element_text(size=15, color = 'red',
hjust = 0.5, vjust = 0)) +
theme(axis.title.x = element_text(size=10, color = 'blue',
hjust=0.5, vjust = 0)) +
theme(axis.title.y = element_text(size=10, color = 'green',
hjust=0.5, vjust = 0)) +
theme(axis.text.x = element_text(angle = 0, size = 10, color = 5)) +
theme(axis.text.y = element_text(size=10, color=6))
### 4. 연령대에 따른 월급 차이(어떤 연령대의 월급이 가장 많을까?)
## 1) 연령대 변수 검토 및 전처리
# 연령대 파생변수 만들기
welfare <- welfare %>%
mutate(ageg = ifelse(welfare$age < 20, '20세 이하',
ifelse(welfare$age < 30, '20대',
ifelse(welfare$age < 40, '30대',
ifelse(welfare$age < 50, '40',
ifelse(welfare$age < 60, '50대', '60세 이상'))))))
table(welfare$ageg)
### 4. 연령대에 따른 월급 차이(어떤 연령대의 월급이 가장 많을까?)
## 1) 연령대 변수 검토 및 전처리
# 연령대 파생변수 만들기
welfare <- welfare %>%
mutate(ageg = ifelse(age < 30, "20대 이하",
ifelse(age < 40, "30대",
ifelse(age < 50, "40대",
ifelse(age < 60, "50대", "60대 이상")))))
table(welfare$ageg)
qplot(welfare$ageg)
# 연령대 월급 평균표 만들기
ageg_income <- welfare %>%
filter(!is.na(income)) %>%
group_by(ageg) %>%
summarise(mean_income = mean(income))
ageg_income
# 그래프 그리기
ggplot(ageg_income, aes(x= ageg, y= mean_income, fill= ageg)) +
geom_bar(stat = 'identity')
# 그래프 그리기
ggplot(ageg_income, aes(x= ageg, y= mean_income, fill= ageg)) +
geom_bar(stat = 'identity') +
ggtitle('연령대별 평균월급')
# 그래프 그리기
ggplot(ageg_income, aes(x= ageg, y= mean_income, fill= ageg)) +
geom_bar(stat = 'identity') +
ggtitle('연령대별 평균월급') +
xlab('연령대') +
ylab('평균월급') +
theme_light()
# 그래프 그리기
ggplot(ageg_income, aes(x= ageg, y= mean_income, fill= ageg)) +
geom_bar(stat = 'identity') +
ggtitle('연령대별 평균월급') +
xlab('연령대') +
ylab('평균월급') +
theme_light() +
them(plot.title = element_text(color = 'red'))
# 그래프 그리기
ggplot(ageg_income, aes(x= ageg, y= mean_income, fill= ageg)) +
geom_bar(stat = 'identity') +
ggtitle('연령대별 평균월급') +
xlab('연령대') +
ylab('평균월급') +
theme_light() +
theme(plot.title = element_text(color = 'red'))
# 그래프 그리기
ggplot(ageg_income, aes(x= ageg, y= mean_income, fill= ageg)) +
geom_bar(stat = 'identity') +
ggtitle('연령대별 평균월급') +
xlab('연령대') +
ylab('평균월급') +
theme_light() +
theme(plot.title = element_text(color = 'red', size=15, hjust = 0.5))
# 그래프 그리기
ggplot(ageg_income, aes(x= ageg, y= mean_income, fill= ageg)) +
geom_bar(stat = 'identity') +
ggtitle('연령대별 평균월급') +
xlab('연령대') +
ylab('평균월급') +
theme_light() +
theme(plot.title = element_text(size=15, color = 'red',
hjust = 0.5, vjust=0)) +
theme(axis.title.x = element_text(size = 10, color = 'blue',
hjust = 0.5, vjust = 0)) +
theme(axis.title.y = element_text(size= 10, color = 'green',
hjust = 0.5, vjust = 0)) +
theme(axis.text.x = element_text(angle=45, size = 10, color=6)) +
theme(axis.text.y = element_text(angle=0, size = 10, color=9)) +
theme(legend.title = element_text(face="italic", colour="darkblue",size=10))
# 그래프 그리기
ggplot(ageg_income, aes(x= ageg, y= mean_income, fill= ageg)) +
geom_bar(stat = 'identity') +
ggtitle('연령대별 평균월급') +
xlab('연령대') +
ylab('평균월급') +
theme_light() +
theme(plot.title = element_text(size=15, color = 'red',
hjust = 0.5, vjust=0)) +
theme(axis.title.x = element_text(size = 10, color = 'blue',
hjust = 0.5, vjust = 0)) +
theme(axis.title.y = element_text(size= 10, color = 'green',
hjust = 0.5, vjust = 0)) +
theme(axis.text.x = element_text(angle=45, size = 10, color=6)) +
theme(axis.text.y = element_text(angle=0, size = 10, color=9)) +
theme(legend.title = element_text(face="italic", colour="darkblue",size=10)) +
theme(legend.text = element_text(face='italic', colour = 'blue', size=8))
ageg_income
geom_text(aes(y=mean_income - 5, label= paste(round(mean_income,1), '만원')),
color='black', size=5)
# 그래프 그리기
ggplot(ageg_income, aes(x= ageg, y= mean_income, fill= ageg)) +
geom_bar(stat = 'identity') +
ggtitle('연령대별 평균월급') +
xlab('연령대') +
ylab('평균월급') +
theme_light() +
theme(plot.title = element_text(size=15, color = 'red',
hjust = 0.5, vjust=0)) +
theme(axis.title.x = element_text(size = 10, color = 'blue',
hjust = 0.5, vjust = 0)) +
theme(axis.title.y = element_text(size= 10, color = 'green',
hjust = 0.5, vjust = 0)) +
theme(axis.text.x = element_text(angle=45, size = 10, color=6)) +
theme(axis.text.y = element_text(angle=0, size = 10, color=9)) +
theme(legend.title = element_text(face="italic", colour="darkblue",size=10)) +
theme(legend.text = element_text(face='italic', colour = 'blue', size=8)) +
geom_text(aes(y=mean_income - 5, label= paste(round(mean_income,1), '만원')),
color='black', size=5)
# 그래프 그리기
ggplot(ageg_income, aes(x= ageg, y= mean_income, fill= ageg)) +
geom_bar(stat = 'identity') +
ggtitle('연령대별 평균월급') +
xlab('연령대') +
ylab('평균월급') +
theme_light() +
theme(plot.title = element_text(size=15, color = 'red',
hjust = 0.5, vjust=0)) +
theme(axis.title.x = element_text(size = 10, color = 'blue',
hjust = 0.5, vjust = 0)) +
theme(axis.title.y = element_text(size= 10, color = 'green',
hjust = 0.5, vjust = 0)) +
theme(axis.text.x = element_text(angle=45, size = 10, color=6)) +
theme(axis.text.y = element_text(angle=0, size = 10, color=9)) +
theme(legend.title = element_text(face="italic", colour="darkblue",size=10)) +
theme(legend.text = element_text(face='italic', colour = 'blue', size=8)) +
geom_text(aes(y=mean_income - 5, label= paste(round(mean_income,1), '만원')),
color='black', size=3)
