# read.csv.sql
install.packages('googleVis')
# read.csv.sql
install.packages('googleVis')
install.packages('googleVis')
install.rtools(f,f)
install.packages('googleVis')
install.packages('googleVis')
library()
install.packages('googleVis')
install.packages(c('googleVis')
install.packages(c('googleVis')
install.rtools(f,f)
install.packages(c('googleVis')
install.packages('googleVis')
install.packages('googleVis')
install.packages('googleVis')
# 연습문제
#1. 구구단
for (i in 2:9) {
line <- str_c(i, '단')
print(line)
for (k in 1:9) {
line <- str_c(i, ' * ', k, ' = ', i*k)
print(line)
}
}
# 연습문제
#1. 구구단
library(stringr)
for (i in 2:9) {
line <- str_c(i, '단')
print(line)
for (k in 1:9) {
line <- str_c(i, ' * ', k, ' = ', i*k)
print(line)
}
}
for (i in 2:9) {
x <- paste(i, '단')
print(x)
}
for (i in 2:9) {
x <- paste(i, '단')
print(x)
for(k in 1:9) {
x <- print(paste(i, '*', K, '=', i*l))
}
}
for (i in 2:9) {
x <- paste(i, '단')
print(x)
for(k in 1:9) {
x <- paste(i, '*', K, '=', i*l)
print(x)
}
}
for (i in 2:9) {
x <- paste(i, '단')
print(x)
for(k in 1:9) {
x <- paste(i, '*', K, '=', i*k)
print(x)
}
}
for (i in 2:9) {
x <- paste(i, '단')
print(x)
for(k in 1:9) {
x <- paste(i, '*', K, '=', i*k)
print(x)
}
}
for (i in 2:9) {
x <- paste(i, '단')
print(x)
for(k in 1:9) {
x <- paste(i, '*', k, '=', i*K)
print(x)
}
}
for (i in 2:9) {
line <- str_c(i, '단')
print(line)
for (k in 1:9) {
line <- str_c(i, ' * ', k, ' = ', i*k)
print(line)
}
}
for (i in 2:9) {
line <- paste(i, '단')
print(line)
for(k in 1:9) {
line <- paste(i, '*', k, '=', i*K)
print(line)
}
}
for (i in 2:9) {
line <- paste(i, '단')
print(line)
for(k in 1:9) {
line <- paste(i, '*', k, '=', i*k)
print(line)
}
}
for (i in 2:9) {
line <- paste(i, '단')
print(line)
for(k in 1:9) {
line <- paste(i, '*', k, '=', i*k)
print(line)
}
}
for(i in 2:9) {
print(i)
}
for(i in 2:9) {
gugudan <- paste(i, '단')
print(i)
}
for(i in 2:9) {
gugudan <- paste(i, '단')
print(gugudan)
}
for(i in 2:9) {
gugudan <- paste(i, '단')
print(gugudan)
for(k in 1:9) {
ggg <- paste(i, '*', k, '=', i*k)
print(ggg)
}
}
gg <- function(x) {
for(i in 2:9) {
gugudan <- paste(i, '단')
print(gugudan)
for(k in 1:9) {
ggg <- paste(i, '*', k, '=', i*k)
print(ggg)
}
}
}
gg(1)
while (T) {
for (i in 1:4) {
line <- ''
if (i != 4) {
for (k in 1:(3 - (i - 1)))
line <- str_c(line, ' ')
}
for (k in 1:(2*i - 1))
line <- str_c(line, '#')
print(line)
}
for (i in 3:1) {
line <- ''
for (k in 1:(3 - (i - 1)))
line <- str_c(line, ' ')
for (k in 1:(2*i - 1))
line <- str_c(line, '#')
print(line)
}
break;
}
d <- paste(!)
while(w<4) {
d <- paste(!)
print(d)
}
while(w<4) {
d <- w
print(d)
}
print(w)
while(w<4) {
print(w)
}
w <- 0
while(w<4) {
print(w)
}
setwd('D:/Heechul/R/R_Lecture/part2/stage1_Word Cloud/ex1')
install.packages('KoNLP')
install.packages('wordcloud')
library(KoNLP)
library(wordcloud)
useSejongDic()
# 1. 분석할 원본 데이터를 변수로 읽기
data1 <- readLines('seoul_new.txt')
data1
# 2. 데이터 중에서 명사만 골라낸 후 nouns 변수에 할당
data2 <- sapply(data1, extracNoun, USE.NAMES = F)
# 2. 데이터 중에서 명사만 골라낸 후 nouns 변수에 할당
data2 <- sapply(data1, extractNoun, USE.NAMES = F)
data2
# 3. 추출된 명사를 30개만 출력해서 확인
head(unlist(data2), 30)
data3 <- unlist(data2)
data3
data3 <- gsub('서울시','', data3)
# 4. 위 출력 결과에서 원하지 않는 내용 걸러내기
data3 <- gsub('\\d+','', data3)     # 모든 숫자 없애기
data3 <- gsub('서울시','', data3)
data3 <- gsub('서울','', data3)
data3 <- gsub('요청','', data3)
data3 <- gsub('제안','', data3)
data3 <- gsub(' ','', data3)
data3 <- gsub('-','', data3)
data3
# 5. 파일로 저장한 후 데이블 형태로 변환하여 불러들임
unlist(data3)
data3
# 5. 파일로 저장한 후 데이블 형태로 변환하여 불러들임
write(data3, 'seoul_2.txt')
# 6. 수정 완료된 파일을 read.table 명령으로 다시 변수에 불러들임
data4 <- read.table('seoul_2.txt')
data4
# 7. 화면에 그래픽으로 출력하기 전에 text 형태로 결과를 확인
nrow(data4)
# 5. 파일로 저장한 후 데이블 형태로 변환하여 불러들임
write(unlist(data3), 'seoul_2.txt')
# 6. 수정 완료된 파일을 read.table 명령으로 다시 변수에 불러들임
data4 <- read.table('seoul_2.txt')
data4
# 7. 화면에 그래픽으로 출력하기 전에 text 형태로 결과를 확인
nrow(data4)
# 1. 분석할 원본 데이터를 변수로 읽기
data1 <- readLines('seoul_new.txt')
data1
# 2. 데이터 중에서 명사만 골라낸 후 nouns 변수에 할당
data2 <- sapply(data1, extractNoun, USE.NAMES = F)
data2
# 3. 추출된 명사를 30개만 출력해서 확인
head(unlist(data2), 30)
data3 <- unlist(data2)
data3
# 4. 위 출력 결과에서 원하지 않는 내용 걸러내기
data3 <- gsub('\\d+','', data3)     # 모든 숫자 없애기
data3 <- gsub('서울시','', data3)
data3 <- gsub('서울','', data3)
data3 <- gsub('요청','', data3)
data3 <- gsub('제안','', data3)
data3 <- gsub(' ','', data3)
data3 <- gsub('-','', data3)
data3
# 5. 파일로 저장한 후 데이블 형태로 변환하여 불러들임
write(unlist(data3), 'seoul_2.txt')
# 6. 수정 완료된 파일을 read.table 명령으로 다시 변수에 불러들임
data4 <- read.table('seoul_2.txt')
data4
# 7. 화면에 그래픽으로 출력하기 전에 text 형태로 결과를 확인
nrow(data4)
# 1. 분석할 원본 데이터를 변수로 읽기
data1 <- readLines('seoul_new.txt')
data1
# 2. 데이터 중에서 명사만 골라낸 후 nouns 변수에 할당
data2 <- sapply(data1, extractNoun, USE.NAMES = F)
data2
# 3. 추출된 명사를 30개만 출력해서 확인
head(unlist(data2), 30)
data3 <- unlist(data2)
data3
# 4. 위 출력 결과에서 원하지 않는 내용 걸러내기
data3 <- gsub('\\d+','', data3)     # 모든 숫자 없애기
data3 <- gsub('서울시','', data3)
data3 <- gsub('서울','', data3)
data3 <- gsub('요청','', data3)
data3 <- gsub('제안','', data3)
data3 <- gsub(' ','', data3)
data3 <- gsub('-','', data3)
data3
# 5. 파일로 저장한 후 데이블 형태로 변환하여 불러들임
write(unlist(data3), 'seoul_2.txt')
# 6. 수정 완료된 파일을 read.table 명령으로 다시 변수에 불러들임
data4 <- read.table('seoul_2.txt')
data4
# 7. 화면에 그래픽으로 출력하기 전에 text 형태로 결과를 확인
nrow(data4)
wordcount <- table(data4)
wordcount
head(sort(wordcount, decreasing = T), 20)
data3 <- gsub('OO','', data3)
data3 <- gsub('개선','', data3)
data3 <- gsub('문제','', data3)
data3 <- gsub('관리','', data3)
data3 <- gsub('민원','', data3)
data3 <- gsub('이용','', data3)
data3 <- gsub('관련','', data3)
data3 <- gsub('시장','', data3)
# 8. 다시 파일로 저장한 후 데이블 형태로 변환하여 불러들임
write(unlist(data3), 'seoul_2.txt')
# 9. 다시 수정 완료된 파일을 read.table 명령으로 다시 변수에 불러들임
data4 <- read.table('seoul_2.txt')
data4
# 10. 다시 화면에 그래픽으로 출력하기 전에 text 형태로 결과를 확인
nrow(data4)
wordcount <- table(data4)
wordcount
head(sort(wordcount, decreasing = T), 20)
# wordcloud 형태로 그래픽 출력
library(RColorBrewer)
palete <- brewer.pal(9, 'Set3')
wordcloud(names(wordcount), freq=wordcount, scale=c(5,1), rot.per = 0.25,
min.freq = 1, random.order = F, random.color = T, colors = palete)
wordcloud(names(wordcount), freq=wordcount, scale=c(5,4), rot.per = 0.25,
min.freq = 1, random.order = F, random.color = T, colors = palete)
wordcloud(names(wordcount), freq=wordcount, scale=c(10,4), rot.per = 0.25,
min.freq = 1, random.order = F, random.color = T, colors = palete)
wordcloud(names(wordcount), freq=wordcount, scale=c(10,0.3), rot.per = 0.25,
min.freq = 1, random.order = F, random.color = T, colors = palete)
wordcloud(names(wordcount), freq=wordcount, scale=c(5,0.3), rot.per = 0.25,
min.freq = 1, random.order = F, random.color = T, colors = palete)
wordcloud(names(wordcount), freq=wordcount, scale=c(4,0.3), rot.per = 0.25,
min.freq = 1, random.order = F, random.color = T, colors = palete)
wordcloud(names(wordcount), freq=wordcount, scale=c(2,0.2), rot.per = 0.25,
min.freq = 1, random.order = F, random.color = T, colors = palete)
legend(0.3, 1, '서울시 응답소 요청사항 분석', cex=0.8, fill=NA, border=NA,
bg='white', text.col='red', text.font=2, box.col='red')
legend(0.3, 1, '서울시 응답소 요청사항 분석', cex=2, fill=NA, border=NA,
bg='white', text.col='red', text.font=2, box.col='red')
legend(0.3, 1, '서울시 응답소 요청사항 분석', cex=0.5, fill=NA, border=NA,
bg='white', text.col='red', text.font=4, box.col='red')
wordcloud(names(wordcount), freq=wordcount, scale=c(2,0.2), rot.per = 0.25,
min.freq = 1, random.order = F, random.color = T, colors = palete)
legend(0.3, 1, '서울시 응답소 요청사항 분석', cex=0.5, fill=NA, border=NA,
bg='white', text.col='red', text.font=4, box.col='red')
legend(0.3, 1, '서울시 응답소 요청사항 분석', cex=0.5, fill=NA, border=NA,
bg='white', text.col='green', text.font=4, box.col='red')
legend(0.3, 1, '서울시 응답소 요청사항 분석', cex=0.5, fill=NA, border=NA,
bg='blue', text.col='green', text.font=4, box.col='red')
legend(0.3, 1, '서울시 응답소 요청사항 분석', cex=0.5, fill='red', border=NA,
bg='blue', text.col='green', text.font=4, box.col='red')
legend(0.3, 1, '서울시 응답소 요청사항 분석', cex=0.5, fill=NA, border=1,
bg='blue', text.col='green', text.font=4, box.col='red')
wordcloud(names(wordcount), freq=wordcount, scale=c(4,0.2), rot.per = 0.25,
min.freq = 1, random.order = F, random.color = T, colors = palete)
legend(0.3, 1, '서울시 응답소 요청사항 분석', cex=0.5, fill=NA, border=1,
bg='blue', text.col='green', text.font=4, box.col='red')
legend(0.3, 1, '서울시 응답소 요청사항 분석', cex=0.5, fill=NA, border=1,
bg='darkblue', text.col='green', text.font=4, box.col='red')
legend(0.3, 1, '서울시 응답소 요청사항 분석', cex=0.5, fill=NA, border=1,
bg='gray', text.col='green', text.font=4, box.col='red')
legend(0.3, 1, '서울시 응답소 요청사항 분석', cex=0.5, fill=NA, border=1,
bg='gray', text.col='red', text.font=4, box.col='red')
legend(0.3, 1, '서울시 응답소 요청사항 분석', cex=0.5, fill=NA, border=1,
bg='gray', text.col='red', text.font=4, box.col='black')
legend(0.3, 1, '서울시 응답소 요청사항 분석', cex=0.5, fill=NA, border=NA,
bg='gray', text.col='red', text.font=4, box.col='black')
legend(0.3, 1, '서울시 응답소 요청사항 분석', cex=0.5, fill=NA, border=NA,
bg='gray', text.col='red', text.font=10, box.col='black')
legend(0.3, 1, '서울시 응답소 요청사항 분석', cex=0.6, fill=NA, border=NA,
bg='gray', text.col='red', text.font=10, box.col='black')
legend(0.2, 1, '서울시 응답소 요청사항 분석', cex=0.6, fill=NA, border=NA,
bg='gray', text.col='red', text.font=10, box.col='black')
legend(0.22, 1, '서울시 응답소 요청사항 분석', cex=0.6, fill=NA, border=NA,
bg='gray', text.col='red', text.font=10, box.col='black')
wordcloud(names(wordcount), freq=wordcount, scale=c(4,0.2), rot.per = 0.25,
min.freq = 1, random.order = F, random.color = T, colors = palete)
legend(0.22, 1, '서울시 응답소 요청사항 분석', cex=0.6, fill=NA, border=NA,
bg='gray', text.col='red', text.font=10, box.col='black')
setwd('D:/Heechul/R/R_Lecture/part2/stage1_Word Cloud/ex2')
library(KoNLP)
library(wordcloud)
useSejongDic()
.libPaths()
# 1. 주요 패키지를 설치하고 로딩해서 분석할 준비를 한다.
data1 <- readLines('remake/txt')
# 예제 1-2. 여고생은 어디를 가장 고치고 싶을까요?
setwd('D:/Heechul/R/R_Lecture/part2/stage1_Word Cloud/ex2')
# 1. 주요 패키지를 설치하고 로딩해서 분석할 준비를 한다.
data1 <- readLines('remake.txt')
data1
data2 <- sapply(data1, extractNoun, USE.NAMES = F)
data2
data3 <- unlist(data2)
data3
data3 <- Filter(funtion(x) {nchar(x) <= 10}, data3)
data3 <- Filter(function(x) {nchar(x) <= 10}, data3)
data3
head(unlist(data3), 30)
data3 <- gsub('\\d+','', data3)
data3 <- gsub('\\d+','', data3)
data3 <- gsub('\\d+','', data3)
data3 <- gsub('\\d+','', data3)
# gsub('변경전글자', '변경후글자', '원본데이터')
data3 <- gsub('\\d+','', data3)
data3 <- gsub('쌍수','쌍꺼풀', data3)
data3 <- gsub('쌍커풀','쌍꺼풀', data3)
data3 <- gsub('메부리코','매부리코', data3)
data3 <- gsub('\\.','', data3)     #
data3 <- gsub(' ','', data3)
data3 <- gsub("\\'",'', data3)     #
data3
## 2. 공백 제거하기
write(unlist(data3), 'remake_2.txt')
data4
nrow(data4)
wordcount <- table(data4)
wordcount
## 3. 필요없는 단어들 제거하기2
head(sort(wordcount, decreasing = T), 20)
txt <- readLines('성형gsub.txt')     # 제거하고 싶은 단어 목록을 불러옴
txt
cnt_txt <- length(txt)
cnt_txt
i <- 1
for(i in 1:cnt_txt) {
data3 <- gsub((txt[i]),'', data3)  # i가 1일때 첫번째 단어 '' 바꾸고 다시 돌아가서 2번째 실행
}
data3
data3 <- Filter(function(x){nchar >=2}, data3)
data3 <- Filter(function(x) {nchar(x) >=2}, data3)
data3
write(unlist(data3), 'remake_2.txt')
data4 <- read.table('remake_2.txt')
data4
nrow(data4)
wordcount <- table(data4)
wordcount
head(sort(wordcount, decreasing = T),20)
## 4. 워드 클라우드를 생성
library(RColorBrewer)
palete <- brewer.pal(9, 'Set3')
wordcloud(names(wordcount), freq=wordcount, scale=c(5,1), rot.per = 0.25,
min.freq = 2, random.order = F, random.color = T, colors = palete)
wordcloud(names(wordcount), freq=wordcount, scale=c(3,0.2), rot.per = 0.25,
min.freq = 2, random.order = F, random.color = T, colors = palete)
legend(0.22, 1, '여고생들이 선호하는 성형수술 부위', cex=0.6, fill=NA, border=NA,
bg='white', text.col='red', text.font=10, box.col='black')
legend(0.22, 1, '여고생들이 선호하는 성형수술 부위', cex=0.5, fill=NA, border=NA,
bg='white', text.col='red', text.font=10, box.col='black')
wordcloud(names(wordcount), freq=wordcount, scale=c(3,0.2), rot.per = 0.25,
min.freq = 2, random.order = F, random.color = T, colors = palete)
legend(0.22, 1, '여고생들이 선호하는 성형수술 부위', cex=0.5, fill=NA, border=NA,
bg='white', text.col='red', text.font=10, box.col='black')
legend(0.3, 1, '여고생들이 선호하는 성형수술 부위', cex=0.5, fill=NA, border=NA,
bg='white', text.col='red', text.font=10, box.col='black')
wordcloud(names(wordcount), freq=wordcount, scale=c(3,0.2), rot.per = 0.25,
min.freq = 2, random.order = F, random.color = T, colors = palete)
legend(0.3, 1, '여고생들이 선호하는 성형수술 부위', cex=0.5, fill=NA, border=NA,
bg='white', text.col='red', text.font=10, box.col='black')
wordcloud(names(wordcount), freq=wordcount, scale=c(3,0.2), rot.per = 0.25,
min.freq = 2, random.order = F, random.color = T, colors = palete)
legend(0.3, 1, '여고생들이 선호하는 성형수술 부위', cex=0.6, fill=NA, border=NA,
bg='white', text.col='red', text.font=1, box.col='black')
legend(0.2, 1, '여고생들이 선호하는 성형수술 부위', cex=0.6, fill=NA, border=NA,
bg='white', text.col='red', text.font=1, box.col='black')
wordcloud(names(wordcount), freq=wordcount, scale=c(3,0.2), rot.per = 0.25,
min.freq = 2, random.order = F, random.color = T, colors = palete)
legend(0.2, 1, '여고생들이 선호하는 성형수술 부위', cex=0.6, fill=NA, border=NA,
bg='white', text.col='red', text.font=1, box.col='black')
palete <- brewer.pal(9, 'Set1')
wordcloud(names(wordcount), freq=wordcount, scale=c(3,0.2), rot.per = 0.25,
min.freq = 2, random.order = F, random.color = T, colors = palete)
legend(0.2, 1, '여고생들이 선호하는 성형수술 부위', cex=0.6, fill=NA, border=NA,
bg='white', text.col='red', text.font=1, box.col='black')
### 예제 1-1. 서울시 응답소 페이지 분석하기
setwd('D:/Heechul/R/R_Lecture/part2/stage1_Word Cloud/ex1')
## 1. 분석할 원본 데이터를 변수로 읽기
data1 <- readLines('seoul_new.txt')
data1
## 2. 데이터 중에서 명사만 골라낸 후 nouns 변수에 할당
data2 <- sapply(data1, extractNoun, USE.NAMES = F)
## 3. 추출된 명사를 30개만 출력해서 확인
head(unlist(data2), 30)
data3 <- unlist(data2)
data3
## 4. 위 출력 결과에서 원하지 않는 내용 걸러내기
data3 <- gsub('\\d+','', data3)     # 모든 숫자 없애기
data3 <- gsub('서울시','', data3)
data3 <- gsub('서울','', data3)
data3 <- gsub('요청','', data3)
data3 <- gsub('제안','', data3)
data3 <- gsub(' ','', data3)
data3 <- gsub('-','', data3)
data3 <- gsub('OO','', data3)
data3 <- gsub('개선','', data3)
data3 <- gsub('문제','', data3)
data3 <- gsub('관리','', data3)
data3 <- gsub('민원','', data3)
data3 <- gsub('이용','', data3)
data3 <- gsub('관련','', data3)
data3 <- gsub('시장','', data3)
## 8. 다시 파일로 저장한 후 데이블 형태로 변환하여 불러들임
write(unlist(data3), 'seoul_2.txt')
## 9. 다시 수정 완료된 파일을 read.table 명령으로 다시 변수에 불러들임
data4 <- read.table('seoul_2.txt')
data4
## 10. 다시 화면에 그래픽으로 출력하기 전에 text 형태로 결과를 확인
nrow(data4)
wordcount <- table(data4)
wordcount
head(sort(wordcount, decreasing = T), 20)
palete <- brewer.pal(9, 'Set3')
wordcloud(names(wordcount), freq=wordcount, scale=c(4,0.2), rot.per = 0.25,
min.freq = 1, random.order = F, random.color = T, colors = palete)
palete <- brewer.pal(8, 'Set3')
wordcloud(names(wordcount), freq=wordcount, scale=c(4,0.2), rot.per = 0.25,
min.freq = 1, random.order = F, random.color = T, colors = palete)
palete <- brewer.pal(9, 'Set3')
wordcloud(names(wordcount), freq=wordcount, scale=c(4,0.2), rot.per = 0.25,
min.freq = 1, random.order = F, random.color = T, colors = palete)
legend(0.22, 1, '서울시 응답소 요청사항 분석', cex=0.6, fill=NA, border=NA,
bg='gray', text.col='red', text.font=10, box.col='black')
### 예제 1-2. 여고생은 어디를 가장 고치고 싶을까요?
setwd('D:/Heechul/R/R_Lecture/part2/stage1_Word Cloud/ex2')
